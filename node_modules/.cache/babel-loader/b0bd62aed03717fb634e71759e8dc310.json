{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  activeBoard: 0,\n  boardsList: []\n};\n\nconst reducer = (state = initialState, action) => {\n  const getActiveBoardObject = () => {\n    let currentBoard = state.boardsList.filter(b => b.id === state.activeBoard);\n    return currentBoard[0];\n  };\n\n  switch (action.type) {\n    case 'SET_ACTIVE_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload\n      });\n\n    case 'CREATE_NEW_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload.id,\n        boardsList: [...state.boardsList, action.payload]\n      });\n\n    case 'CREATE_NEW_TASK':\n      let board = getActiveBoardObject();\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/store/reducer.tsx"],"names":["initialState","activeBoard","boardsList","reducer","state","action","getActiveBoardObject","currentBoard","filter","b","id","type","payload","board"],"mappings":";;;;;;AA4BA,MAAMA,YAAmB,GAAG;AACxBC,EAAAA,WAAW,EAAE,CADW;AAExBC,EAAAA,UAAU,EAAE;AAFY,CAA5B;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAY,GAAGJ,YAAhB,EAA8BK,MAA9B,KAAiD;AAE7D,QAAMC,oBAAoB,GAAG,MAAM;AAC/B,QAAIC,YAAY,GAAGH,KAAK,CAACF,UAAN,CAAiBM,MAAjB,CAAyBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,KAAK,CAACH,WAA9C,CAAnB;AACA,WAAOM,YAAY,CAAC,CAAD,CAAnB;AACH,GAHD;;AAKA,UAAQF,MAAM,CAACM,IAAf;AACI,SAAK,kBAAL;AACI,+BACOP,KADP;AAEIH,QAAAA,WAAW,EAAEI,MAAM,CAACO;AAFxB;;AAKJ,SAAK,kBAAL;AACI,+BACOR,KADP;AAEIH,QAAAA,WAAW,EAAEI,MAAM,CAACO,OAAP,CAAeF,EAFhC;AAGIR,QAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBG,MAAM,CAACO,OAA7B;AAHhB;;AAKJ,SAAK,iBAAL;AACI,UAAIC,KAAK,GAAGP,oBAAoB,EAAhC;AACA,+BACOF,KADP;;AAIJ;AACI,aAAOA,KAAP;AApBR;AAsBH,CA7BD;;AA+BA,eAAeD,OAAf","sourcesContent":["interface Action {\n    type: string;\n    payload: any;\n}\n\ninterface Board {\n    id: number, \n    img: string, \n    name: string, \n    dueDate: string, \n    todos: Array<Task>,\n    inprogress: Array<Task>,\n    done: Array<Task>\n}\n\ninterface Task {\n    taskId: number,\n    category: string,\n    taskName: string,\n    taskDueDate: string,\n    taskStatus: string\n}\n\ninterface State {\n    activeBoard: number;\n    boardsList: Array<Board>;\n}\n\nconst initialState: State = {\n    activeBoard: 0,\n    boardsList: []\n};\n\nconst reducer = (state: State = initialState, action: Action) => {\n\n    const getActiveBoardObject = () => {\n        let currentBoard = state.boardsList.filter((b) => b.id === state.activeBoard);\n        return currentBoard[0]; \n    }\n\n    switch (action.type) {\n        case 'SET_ACTIVE_BOARD':\n            return {\n                ...state,\n                activeBoard: action.payload\n            }\n\n        case 'CREATE_NEW_BOARD':\n            return {\n                ...state,\n                activeBoard: action.payload.id,\n                boardsList: [...state.boardsList, action.payload]\n            }\n        case 'CREATE_NEW_TASK':\n            let board = getActiveBoardObject();\n            return {\n                ...state,\n\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}