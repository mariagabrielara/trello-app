{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  activeBoard: '1',\n  boardsList: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_ACTIVE_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload\n      });\n\n    case 'CREATE_NEW_BOARD':\n      let newBoardsList = state.boardsList.push(action.payload);\n      return _objectSpread({}, state, {\n        activeBoard: newBoardsList\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/store/reducer.tsx"],"names":["initialState","activeBoard","boardsList","reducer","state","action","type","payload","newBoardsList","push"],"mappings":";;;;;;AAWA,MAAMA,YAAmB,GAAG;AACxBC,EAAAA,WAAW,EAAE,GADW;AAExBC,EAAAA,UAAU,EAAE;AAFY,CAA5B;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAY,GAAGJ,YAAhB,EAA8BK,MAA9B,KAAiD;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,kBAAL;AACI,+BACOF,KADP;AAEIH,QAAAA,WAAW,EAAEI,MAAM,CAACE;AAFxB;;AAKJ,SAAK,kBAAL;AACI,UAAIC,aAAa,GAAGJ,KAAK,CAACF,UAAN,CAAiBO,IAAjB,CAAsBJ,MAAM,CAACE,OAA7B,CAApB;AACA,+BACOH,KADP;AAEIH,QAAAA,WAAW,EAAEO;AAFjB;;AAIJ;AACI,aAAOJ,KAAP;AAdR;AAgBH,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["interface Action {\n    type: string;\n    payload: any;\n}\n\ninterface State {\n    activeBoard: string;\n\n    boardsList: Array<{}>;\n}\n\nconst initialState: State = {\n    activeBoard: '1',\n    boardsList: []\n};\n\nconst reducer = (state: State = initialState, action: Action) => {\n    switch (action.type) {\n        case 'SET_ACTIVE_BOARD':\n            return {\n                ...state,\n                activeBoard: action.payload\n            }\n\n        case 'CREATE_NEW_BOARD':\n            let newBoardsList = state.boardsList.push(action.payload);\n            return {\n                ...state,\n                activeBoard: newBoardsList\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}