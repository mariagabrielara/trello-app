{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  activeBoard: 0,\n  boardsList: []\n};\n\nconst reducer = (state = initialState, action) => {\n  const getActiveBoardObject = () => {\n    let currentBoard = state.boardsList.filter(b => b.id === state.activeBoard);\n    return currentBoard[0];\n  };\n\n  const addTaskToActiveBoardObject = action => {\n    let boardListCopy = state.boardsList;\n    boardListCopy.map(b => {\n      if (b.id === state.activeBoard) {\n        switch (action.payload.panel) {\n          case 'todos':\n            b.todos.push(action.payload.task);\n            break;\n\n          case 'inprogress':\n            b.inprogress.push(action.payload.task);\n            break;\n\n          case 'done':\n            b.done.push(action.payload.task);\n            break;\n\n          default:\n            b.todos.push(action.payload.task);\n            break;\n        }\n      }\n    });\n    return boardListCopy;\n  };\n\n  switch (action.type) {\n    case 'SET_ACTIVE_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload\n      });\n\n    case 'CREATE_NEW_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload.id,\n        boardsList: [...state.boardsList, action.payload]\n      });\n\n    case 'CREATE_NEW_TASK':\n      let newBoardList = addTaskToActiveBoardObject(action);\n      return _objectSpread({}, state, {\n        boardsList: [...state.boardsList, newBoardList]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/store/reducer.tsx"],"names":["initialState","activeBoard","boardsList","reducer","state","action","getActiveBoardObject","currentBoard","filter","b","id","addTaskToActiveBoardObject","boardListCopy","map","payload","panel","todos","push","task","inprogress","done","type","newBoardList"],"mappings":";;;;;;AA4BA,MAAMA,YAAmB,GAAG;AACxBC,EAAAA,WAAW,EAAE,CADW;AAExBC,EAAAA,UAAU,EAAE;AAFY,CAA5B;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAY,GAAGJ,YAAhB,EAA8BK,MAA9B,KAAiD;AAE7D,QAAMC,oBAAoB,GAAG,MAAa;AACtC,QAAIC,YAAY,GAAGH,KAAK,CAACF,UAAN,CAAiBM,MAAjB,CAAyBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASN,KAAK,CAACH,WAA9C,CAAnB;AACA,WAAOM,YAAY,CAAC,CAAD,CAAnB;AACH,GAHD;;AAKA,QAAMI,0BAA0B,GAAIN,MAAD,IAAkC;AACjE,QAAIO,aAAa,GAAGR,KAAK,CAACF,UAA1B;AACAU,IAAAA,aAAa,CAACC,GAAd,CAAmBJ,CAAD,IAAO;AACrB,UAAIA,CAAC,CAACC,EAAF,KAASN,KAAK,CAACH,WAAnB,EAAgC;AAC5B,gBAAQI,MAAM,CAACS,OAAP,CAAeC,KAAvB;AACI,eAAK,OAAL;AACIN,YAAAA,CAAC,CAACO,KAAF,CAAQC,IAAR,CAAaZ,MAAM,CAACS,OAAP,CAAeI,IAA5B;AACA;;AACJ,eAAK,YAAL;AACIT,YAAAA,CAAC,CAACU,UAAF,CAAaF,IAAb,CAAkBZ,MAAM,CAACS,OAAP,CAAeI,IAAjC;AACA;;AACJ,eAAK,MAAL;AACIT,YAAAA,CAAC,CAACW,IAAF,CAAOH,IAAP,CAAYZ,MAAM,CAACS,OAAP,CAAeI,IAA3B;AACA;;AACJ;AACIT,YAAAA,CAAC,CAACO,KAAF,CAAQC,IAAR,CAAaZ,MAAM,CAACS,OAAP,CAAeI,IAA5B;AACA;AAZR;AAcH;AACJ,KAjBD;AAkBA,WAAON,aAAP;AACH,GArBD;;AAuBA,UAAQP,MAAM,CAACgB,IAAf;AACI,SAAK,kBAAL;AACI,+BACOjB,KADP;AAEIH,QAAAA,WAAW,EAAEI,MAAM,CAACS;AAFxB;;AAKJ,SAAK,kBAAL;AACI,+BACOV,KADP;AAEIH,QAAAA,WAAW,EAAEI,MAAM,CAACS,OAAP,CAAeJ,EAFhC;AAGIR,QAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBG,MAAM,CAACS,OAA7B;AAHhB;;AAKJ,SAAK,iBAAL;AACI,UAAIQ,YAAY,GAAGX,0BAA0B,CAACN,MAAD,CAA7C;AACA,+BACOD,KADP;AAEIF,QAAAA,UAAU,EAAE,CAAC,GAAGE,KAAK,CAACF,UAAV,EAAsBoB,YAAtB;AAFhB;;AAIJ;AACI,aAAOlB,KAAP;AApBR;AAsBH,CApDD;;AAsDA,eAAeD,OAAf","sourcesContent":["interface Action {\n    type: string;\n    payload: any;\n}\n\ninterface Board {\n    id: number, \n    img: string, \n    name: string, \n    dueDate: string, \n    todos: Array<Task>,\n    inprogress: Array<Task>,\n    done: Array<Task>\n}\n\ninterface Task {\n    taskId: number,\n    category: string,\n    taskName: string,\n    taskDueDate: string,\n    taskStatus: string\n}\n\ninterface State {\n    activeBoard: number;\n    boardsList: Array<Board>;\n}\n\nconst initialState: State = {\n    activeBoard: 0,\n    boardsList: []\n};\n\nconst reducer = (state: State = initialState, action: Action) => {\n\n    const getActiveBoardObject = (): Board => {\n        let currentBoard = state.boardsList.filter((b) => b.id === state.activeBoard);\n        return currentBoard[0]; \n    }\n\n    const addTaskToActiveBoardObject = (action: Action): Array<Board> => {\n        let boardListCopy = state.boardsList;\n        boardListCopy.map((b) => {\n            if (b.id === state.activeBoard) {\n                switch (action.payload.panel) {\n                    case 'todos':\n                        b.todos.push(action.payload.task);\n                        break;\n                    case 'inprogress':\n                        b.inprogress.push(action.payload.task);\n                        break;\n                    case 'done':\n                        b.done.push(action.payload.task);\n                        break;\n                    default:\n                        b.todos.push(action.payload.task);\n                        break;\n                }\n            }\n        });\n        return boardListCopy;\n    }\n\n    switch (action.type) {\n        case 'SET_ACTIVE_BOARD':\n            return {\n                ...state,\n                activeBoard: action.payload\n            }\n\n        case 'CREATE_NEW_BOARD':\n            return {\n                ...state,\n                activeBoard: action.payload.id,\n                boardsList: [...state.boardsList, action.payload]\n            }\n        case 'CREATE_NEW_TASK':\n            let newBoardList = addTaskToActiveBoardObject(action);\n            return {\n                ...state,\n                boardsList: [...state.boardsList, newBoardList]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}