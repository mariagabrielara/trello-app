{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mariagabriela/Documents/trello-app/src/components/Board/Board.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './Board.scss';\nimport Panel from '../Panel/Panel';\nimport Task from '../Task/Task';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nconst actions = {\n  onSetActiveBoard: val => ({\n    type: 'SET_ACTIVE_BOARD',\n    payload: val\n  }),\n  onChangePanel: val => ({\n    type: 'ON_CHANGE_PANEL',\n    payload: val\n  })\n};\n\nclass Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDragStart = (e, id) => {\n      console.log('dragstart:', id);\n      e.dataTransfer.setData(\"id\", id);\n      return this.props.onChangePanel('HOLIIIII');\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDrop = (e, cat) => {\n      let id = e.dataTransfer.getData(\"id\");\n      let tasks = this.state.tasks.filter(task => {\n        if (task.key.toString() === id) {\n          task.panel = cat;\n        }\n\n        return task;\n      });\n      this.setState(_objectSpread({}, this.state, {\n        tasks\n      }));\n    };\n  }\n\n  initState() {\n    this.setState({\n      tasks: [{\n        key: Math.random().toString(),\n        panel: \"todo\",\n        taskComponent: React.createElement(Task, {\n          taskCategory: \"TD\",\n          taskName: \"TD 1\",\n          taskDate: \"1-1-19\",\n          taskStatus: \"Active\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        })\n      }],\n      board: {\n        id: this.props.activeBoardData.id,\n        img: this.props.activeBoardData.img,\n        name: this.props.activeBoardData.name,\n        dueDate: this.props.activeBoardData.dueDate,\n        tasks: this.props.activeBoardData.tasks\n      }\n    });\n  }\n\n  UNSAFE_componentWillMount() {\n    this.initState();\n    return this.props.onSetActiveBoard(this.props.id);\n  }\n\n  render() {\n    let globalStateTasks = this.props.activeBoardData.tasks;\n    let globalStateTasksFormatted = globalStateTasks.map(st => {\n      return {\n        key: st.taskId,\n        panel: st.taskPanel,\n        taskComponent: React.createElement(Task, {\n          taskCategory: st.category,\n          taskName: st.taskName,\n          taskDate: st.taskDueDate,\n          taskStatus: st.taskStatus,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        })\n      };\n    });\n    let tasks = {\n      todo: [],\n      inprogress: [],\n      done: []\n    };\n    globalStateTasksFormatted.forEach(t => {\n      switch (t.panel) {\n        case 'todo':\n          tasks.todo.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key.toString()),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, t.taskComponent));\n          break;\n\n        case 'inprogress':\n          tasks.inprogress.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key.toString()),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }, t.taskComponent));\n          break;\n\n        case 'done':\n          tasks.done.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key.toString()),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, t.taskComponent));\n          break;\n      }\n    });\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board__name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.props.activeBoardData.name), React.createElement(\"div\", {\n      className: \"board__due-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Due date: \", this.props.activeBoardData.dueDate), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"todo\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      tasksList: tasks.todo,\n      panelTitle: \"TODO\",\n      panelQuantity: this.props.activeBoardData.tasks.length,\n      panelType: \"todo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"inprogress\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      tasksList: tasks.inprogress,\n      panelTitle: \"IN PROGRESS\",\n      panelQuantity: this.props.activeBoardData.tasks.length,\n      panelType: \"inprogress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"done\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      tasksList: tasks.done,\n      panelTitle: \"DONE\",\n      panelQuantity: this.props.activeBoardData.tasks.length,\n      panelType: \"done\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    activeBoardData: state.activeBoardData\n  };\n};\n\nconst mapDispatchToProps = dispatch => _objectSpread({}, bindActionCreators(_objectSpread({}, actions), dispatch));\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/Board/Board.tsx"],"names":["React","Panel","Task","connect","bindActionCreators","actions","onSetActiveBoard","val","type","payload","onChangePanel","Board","Component","onDragStart","e","id","console","log","dataTransfer","setData","props","onDragOver","preventDefault","onDrop","cat","getData","tasks","state","filter","task","key","toString","panel","setState","initState","Math","random","taskComponent","board","activeBoardData","img","name","dueDate","UNSAFE_componentWillMount","render","globalStateTasks","globalStateTasksFormatted","map","st","taskId","taskPanel","category","taskName","taskDueDate","taskStatus","todo","inprogress","done","forEach","t","push","length","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport './Board.scss';\n\nimport Panel from '../Panel/Panel';\nimport Task from '../Task/Task';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\ninterface Props {\n    id: number,\n    boardsList: Array<{\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    }>;\n    activeBoardData: {\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    };\n    onSetActiveBoard: typeof actions.onSetActiveBoard;\n    onChangePanel: typeof actions.onChangePanel;\n}\n\ninterface BoardState {\n    tasks: Array<FormattedTask>,\n    board: {\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    }\n}\n\ninterface BoardGlobalState {\n    activeBoardData: {\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    }\n}\n\ninterface FormattedTask {\n   key: string;\n   panel: string;\n   taskComponent: JSX.Element; \n}\n\ninterface TaskData {\n    taskId: number,\n    category: string,\n    taskName: string,\n    taskDueDate: string,\n    taskStatus: string\n    taskPanel: string;\n}\n\nconst actions = {\n    onSetActiveBoard: (val: number) => ({type: 'SET_ACTIVE_BOARD', payload: val}),\n    onChangePanel: (val: {taskId: number, newPanel: string}) => ({type: 'ON_CHANGE_PANEL', payload: val})\n}\n\nclass Board extends React.Component<Props, BoardState> {\n\n    initState() {\n        this.setState({\n            tasks: [\n                {   \n                    key: Math.random().toString(), \n                    panel: \"todo\", \n                    taskComponent: (\n                        <Task\n                            taskCategory=\"TD\"\n                            taskName=\"TD 1\"\n                            taskDate=\"1-1-19\"\n                            taskStatus=\"Active\"\n                        />\n                    )\n                }\n             ],\n            board: {\n                id: this.props.activeBoardData.id, \n                img: this.props.activeBoardData.img, \n                name: this.props.activeBoardData.name, \n                dueDate: this.props.activeBoardData.dueDate, \n                tasks: this.props.activeBoardData.tasks\n            }\n        });\n    }\n\n    UNSAFE_componentWillMount() {\n        this.initState();\n        return this.props.onSetActiveBoard(this.props.id);\n    }\n\n    onDragStart = (e: React.DragEvent, id: string) => {\n        console.log('dragstart:', id);\n        e.dataTransfer.setData(\"id\",id);\n\n\n        return this.props.onChangePanel('HOLIIIII');\n    }\n\n    onDragOver = (e: React.DragEvent) => {\n        e.preventDefault();\n    }\n\n    onDrop = (e: React.DragEvent, cat: string) => {\n        let id = e.dataTransfer.getData(\"id\");\n        let tasks = this.state.tasks.filter((task) => {\n            if (task.key.toString() === id) {\n                task.panel = cat;\n            }\n            return task;\n        });\n\n        this.setState({\n            ...this.state,\n            tasks\n        });\n    }\n\n    render () {\n        let globalStateTasks: Array<TaskData> = this.props.activeBoardData.tasks;\n\n        let globalStateTasksFormatted = globalStateTasks.map(st => {\n            return {\n                key: st.taskId, \n                panel: st.taskPanel, \n                taskComponent: (\n                    <Task\n                        taskCategory={st.category}\n                        taskName={st.taskName}\n                        taskDate={st.taskDueDate}\n                        taskStatus={st.taskStatus}\n                    />\n                )\n            }\n        });\n\n        let tasks: {\n            todo: Array<JSX.Element>, \n            inprogress: Array<JSX.Element>, \n            done: Array<JSX.Element>\n        } = {\n            todo: [],\n            inprogress: [],\n            done: []\n        }\n\n        globalStateTasksFormatted.forEach((t) => {\n            switch (t.panel) {\n                case 'todo':\n                    tasks.todo.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key.toString())} \n                            draggable> \n                            {t.taskComponent} \n                        </div>\n                    );\n                break;\n\n                case 'inprogress':\n                    tasks.inprogress.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key.toString())} \n                            draggable> \n                            {t.taskComponent} \n                        </div>\n                    );\n                break;\n\n                case 'done':\n                    tasks.done.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key.toString())} \n                            draggable> \n                            {t.taskComponent} \n                        </div>\n                    );\n                break;\n            }\n            \n        });\n\n        return (\n            <div className=\"board\">\n                <div className=\"board__name\">{this.props.activeBoardData.name}</div>\n                <div className=\"board__due-date\">Due date: {this.props.activeBoardData.dueDate}</div>\n                <div \n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"todo\")}}>\n                    <Panel \n                        tasksList={tasks.todo}\n                        panelTitle=\"TODO\"\n                        panelQuantity={this.props.activeBoardData.tasks.length}\n                        panelType='todo'\n                    />\n                </div>\n                <div \n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"inprogress\")}}>\n                    <Panel \n                        tasksList={tasks.inprogress}\n                        panelTitle=\"IN PROGRESS\"\n                        panelQuantity={this.props.activeBoardData.tasks.length}\n                        panelType='inprogress'\n                    />\n                </div>\n                <div \n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"done\")}}>\n                    <Panel \n                        tasksList={tasks.done}\n                        panelTitle=\"DONE\"\n                        panelQuantity={this.props.activeBoardData.tasks.length}\n                        panelType='done'\n                    />\n                </div>\n            </div>\n        );\n    }\n    \n}\n\nconst mapStateToProps = (state: BoardGlobalState) => {\n    return ({\n        activeBoardData: state.activeBoardData\n    });\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    ...bindActionCreators({\n        ...actions,\n      }, dispatch)\n    });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);"]},"metadata":{},"sourceType":"module"}