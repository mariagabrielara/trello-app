{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mariagabriela/Documents/trello-app/src/components/Board/Board.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './Board.scss';\nimport Panel from '../Panel/Panel';\nimport Task from '../Task/Task';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nconst actions = {\n  onSetActiveBoard: val => ({\n    type: 'SET_ACTIVE_BOARD',\n    payload: val\n  })\n};\n\nclass Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDragStart = (e, id) => {\n      console.log('dragstart:', id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDrop = (e, cat) => {\n      let id = e.dataTransfer.getData(\"id\");\n      let tasks = this.state.tasks.filter(task => {\n        if (task.key.toString() === id) {\n          task.panel = cat;\n        }\n\n        return task;\n      });\n      this.setState(_objectSpread({}, this.state, {\n        tasks\n      }));\n    };\n  }\n\n  initState() {\n    let tasksList = this.state.board.tasks;\n    let formattedTasks = tasksList.map(task => ({\n      key: Math.random(),\n      panel: 'todos',\n      taskComponent: React.createElement(Task, {\n        taskCategory: \"TD\",\n        taskName: \"TD 1\",\n        taskDate: \"1-1-19\",\n        taskStatus: \"Active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })\n    }));\n    console.log(formattedTasks);\n    this.setState({\n      tasks: formattedTasks,\n      // tasks: [\n      //     {   \n      //         key: Math.random().toString(), \n      //         panel: \"todo\", \n      //         taskComponent: (\n      //             <Task\n      //                 taskCategory=\"TD\"\n      //                 taskName=\"TD 1\"\n      //                 taskDate=\"1-1-19\"\n      //                 taskStatus=\"Active\"\n      //             />\n      //         )\n      //     },\n      //     {   \n      //         key: Math.random().toString(), \n      //         panel: \"inprogress\", \n      //         taskComponent: (\n      //             <Task\n      //                 taskCategory=\"IP\"\n      //                 taskName=\"IP 1\"\n      //                 taskDate=\"1-1-19\"\n      //                 taskStatus=\"Active\"\n      //             />\n      //         )\n      //     }\n      // ],\n      board: {\n        id: this.props.activeBoardData.id,\n        img: this.props.activeBoardData.img,\n        name: this.props.activeBoardData.name,\n        dueDate: this.props.activeBoardData.dueDate,\n        tasks: this.props.activeBoardData.tasks\n      }\n    });\n  }\n\n  UNSAFE_componentWillMount() {\n    this.initState();\n    return this.props.onSetActiveBoard(this.props.id);\n  }\n\n  render() {\n    console.log('reder');\n    let tasks = {\n      todo: [],\n      inprogress: [],\n      done: []\n    };\n    this.state.tasks.forEach(t => {\n      switch (t.panel) {\n        case 'todo':\n          tasks.todo.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key.toString()),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }, \" \", t.taskComponent, \" \"));\n          break;\n\n        case 'inprogress':\n          tasks.inprogress.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key.toString()),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, \" \", t.taskComponent, \" \"));\n          break;\n\n        case 'done':\n          tasks.done.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key.toString()),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, \" \", t.taskComponent, \" \"));\n          break;\n      }\n    });\n    return React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board__name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.props.activeBoardData.name), React.createElement(\"div\", {\n      className: \"board__due-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Due date: \", this.props.activeBoardData.dueDate), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"todo\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      tasksList: tasks.todo,\n      panelTitle: \"TODO\",\n      panelQuantity: this.props.activeBoardData.tasks.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"inprogress\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      tasksList: tasks.inprogress,\n      panelTitle: \"IN PROGRESS\",\n      panelQuantity: this.props.activeBoardData.tasks.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"done\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      tasksList: tasks.done,\n      panelTitle: \"DONE\",\n      panelQuantity: this.props.activeBoardData.tasks.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    activeBoardData: state.activeBoardData\n  };\n};\n\nconst mapDispatchToProps = dispatch => _objectSpread({}, bindActionCreators(_objectSpread({}, actions), dispatch));\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/Board/Board.tsx"],"names":["React","Panel","Task","connect","bindActionCreators","actions","onSetActiveBoard","val","type","payload","Board","Component","onDragStart","e","id","console","log","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","tasks","state","filter","task","key","toString","panel","setState","initState","tasksList","board","formattedTasks","map","Math","random","taskComponent","props","activeBoardData","img","name","dueDate","UNSAFE_componentWillMount","render","todo","inprogress","done","forEach","t","push","length","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,cAAP;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAgDA,MAAMC,OAAO,GAAG;AACZC,EAAAA,gBAAgB,EAAGC,GAAD,KAAkB;AAACC,IAAAA,IAAI,EAAE,kBAAP;AAA2BC,IAAAA,OAAO,EAAEF;AAApC,GAAlB;AADN,CAAhB;;AAIA,MAAMG,KAAN,SAAoBV,KAAK,CAACW,SAA1B,CAAuD;AAAA;AAAA;;AAAA,SAgEnDC,WAhEmD,GAgErC,CAACC,CAAD,EAAqBC,EAArB,KAAoC;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,EAA1B;AACAD,MAAAA,CAAC,CAACI,YAAF,CAAeC,OAAf,CAAuB,IAAvB,EAA4BJ,EAA5B;AACH,KAnEkD;;AAAA,SAqEnDK,UArEmD,GAqErCN,CAAD,IAAwB;AACjCA,MAAAA,CAAC,CAACO,cAAF;AACH,KAvEkD;;AAAA,SAyEnDC,MAzEmD,GAyE1C,CAACR,CAAD,EAAqBS,GAArB,KAAqC;AAC1C,UAAIR,EAAE,GAAGD,CAAC,CAACI,YAAF,CAAeM,OAAf,CAAuB,IAAvB,CAAT;AACA,UAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAX,CAAiBE,MAAjB,CAAyBC,IAAD,IAAU;AAC1C,YAAIA,IAAI,CAACC,GAAL,CAASC,QAAT,OAAwBf,EAA5B,EAAgC;AAC5Ba,UAAAA,IAAI,CAACG,KAAL,GAAaR,GAAb;AACH;;AACD,eAAOK,IAAP;AACH,OALW,CAAZ;AAOA,WAAKI,QAAL,mBACO,KAAKN,KADZ;AAEID,QAAAA;AAFJ;AAIH,KAtFkD;AAAA;;AAEnDQ,EAAAA,SAAS,GAAG;AAER,QAAIC,SAAS,GAAG,KAAKR,KAAL,CAAWS,KAAX,CAAiBV,KAAjC;AAEA,QAAIW,cAAoC,GAAGF,SAAS,CAACG,GAAV,CAAcT,IAAI,KAAK;AAC9DC,MAAAA,GAAG,EAAES,IAAI,CAACC,MAAL,EADyD;AAE9DR,MAAAA,KAAK,EAAE,OAFuD;AAG9DS,MAAAA,aAAa,EACT,oBAAC,IAAD;AACI,QAAA,YAAY,EAAC,IADjB;AAEI,QAAA,QAAQ,EAAC,MAFb;AAGI,QAAA,QAAQ,EAAC,QAHb;AAII,QAAA,UAAU,EAAC,QAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJ0D,KAAL,CAAlB,CAA3C;AAaAxB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,cAAZ;AAEA,SAAKJ,QAAL,CAAc;AACVP,MAAAA,KAAK,EAAEW,cADG;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAAA,KAAK,EAAE;AACHpB,QAAAA,EAAE,EAAE,KAAK0B,KAAL,CAAWC,eAAX,CAA2B3B,EAD5B;AAEH4B,QAAAA,GAAG,EAAE,KAAKF,KAAL,CAAWC,eAAX,CAA2BC,GAF7B;AAGHC,QAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWC,eAAX,CAA2BE,IAH9B;AAIHC,QAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWC,eAAX,CAA2BG,OAJjC;AAKHpB,QAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWC,eAAX,CAA2BjB;AAL/B;AA5BG,KAAd;AAoCH;;AAEDqB,EAAAA,yBAAyB,GAAG;AACxB,SAAKb,SAAL;AACA,WAAO,KAAKQ,KAAL,CAAWlC,gBAAX,CAA4B,KAAKkC,KAAL,CAAW1B,EAAvC,CAAP;AACH;;AA0BDgC,EAAAA,MAAM,GAAI;AACN/B,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,QAAIQ,KAIH,GAAG;AACAuB,MAAAA,IAAI,EAAE,EADN;AAEAC,MAAAA,UAAU,EAAE,EAFZ;AAGAC,MAAAA,IAAI,EAAE;AAHN,KAJJ;AAUA,SAAKxB,KAAL,CAAWD,KAAX,CAAiB0B,OAAjB,CAA0BC,CAAD,IAAO;AAC5B,cAAQA,CAAC,CAACrB,KAAV;AACI,aAAK,MAAL;AACIN,UAAAA,KAAK,CAACuB,IAAN,CAAWK,IAAX,CACI;AACI,YAAA,GAAG,EAAED,CAAC,CAACvB,GADX;AAEI,YAAA,WAAW,EAAGf,CAAD,IAAO,KAAKD,WAAL,CAAiBC,CAAjB,EAAoBsC,CAAC,CAACvB,GAAF,CAAMC,QAAN,EAApB,CAFxB;AAGI,YAAA,SAAS,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGgBsB,CAAC,CAACZ,aAHlB,MADJ;AAMJ;;AAEA,aAAK,YAAL;AACIf,UAAAA,KAAK,CAACwB,UAAN,CAAiBI,IAAjB,CACI;AACI,YAAA,GAAG,EAAED,CAAC,CAACvB,GADX;AAEI,YAAA,WAAW,EAAGf,CAAD,IAAO,KAAKD,WAAL,CAAiBC,CAAjB,EAAoBsC,CAAC,CAACvB,GAAF,CAAMC,QAAN,EAApB,CAFxB;AAGI,YAAA,SAAS,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGgBsB,CAAC,CAACZ,aAHlB,MADJ;AAMJ;;AAEA,aAAK,MAAL;AACIf,UAAAA,KAAK,CAACyB,IAAN,CAAWG,IAAX,CACI;AACI,YAAA,GAAG,EAAED,CAAC,CAACvB,GADX;AAEI,YAAA,WAAW,EAAGf,CAAD,IAAO,KAAKD,WAAL,CAAiBC,CAAjB,EAAoBsC,CAAC,CAACvB,GAAF,CAAMC,QAAN,EAApB,CAFxB;AAGI,YAAA,SAAS,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGgBsB,CAAC,CAACZ,aAHlB,MADJ;AAMJ;AA1BJ;AA6BH,KA9BD;AAgCA,WACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKC,KAAL,CAAWC,eAAX,CAA2BE,IAAzD,CADJ,EAEI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA4C,KAAKH,KAAL,CAAWC,eAAX,CAA2BG,OAAvE,CAFJ,EAGI;AACI,MAAA,UAAU,EAAG/B,CAAD,IAAK,KAAKM,UAAL,CAAgBN,CAAhB,CADrB;AAEI,MAAA,MAAM,EAAGA,CAAD,IAAK;AAAC,aAAKQ,MAAL,CAAYR,CAAZ,EAAe,MAAf;AAAuB,OAFzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,KAAD;AACI,MAAA,SAAS,EAAEW,KAAK,CAACuB,IADrB;AAEI,MAAA,UAAU,EAAC,MAFf;AAGI,MAAA,aAAa,EAAE,KAAKP,KAAL,CAAWC,eAAX,CAA2BjB,KAA3B,CAAiC6B,MAHpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAHJ,EAYI;AACI,MAAA,UAAU,EAAGxC,CAAD,IAAK,KAAKM,UAAL,CAAgBN,CAAhB,CADrB;AAEI,MAAA,MAAM,EAAGA,CAAD,IAAK;AAAC,aAAKQ,MAAL,CAAYR,CAAZ,EAAe,YAAf;AAA6B,OAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,KAAD;AACI,MAAA,SAAS,EAAEW,KAAK,CAACwB,UADrB;AAEI,MAAA,UAAU,EAAC,aAFf;AAGI,MAAA,aAAa,EAAE,KAAKR,KAAL,CAAWC,eAAX,CAA2BjB,KAA3B,CAAiC6B,MAHpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CAZJ,EAqBI;AACI,MAAA,UAAU,EAAGxC,CAAD,IAAK,KAAKM,UAAL,CAAgBN,CAAhB,CADrB;AAEI,MAAA,MAAM,EAAGA,CAAD,IAAK;AAAC,aAAKQ,MAAL,CAAYR,CAAZ,EAAe,MAAf;AAAuB,OAFzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,KAAD;AACI,MAAA,SAAS,EAAEW,KAAK,CAACyB,IADrB;AAEI,MAAA,UAAU,EAAC,MAFf;AAGI,MAAA,aAAa,EAAE,KAAKT,KAAL,CAAWC,eAAX,CAA2BjB,KAA3B,CAAiC6B,MAHpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CArBJ,CADJ;AAiCH;;AArKkD;;AAyKvD,MAAMC,eAAe,GAAI7B,KAAD,IAA6B;AACjD,SAAQ;AACJgB,IAAAA,eAAe,EAAEhB,KAAK,CAACgB;AADnB,GAAR;AAGH,CAJD;;AAMA,MAAMc,kBAAkB,GAAIC,QAAD,sBACpBpD,kBAAkB,mBACdC,OADc,GAEhBmD,QAFgB,CADE,CAA3B;;AAMA,eAAerD,OAAO,CAACmD,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C7C,KAA7C,CAAf","sourcesContent":["import React from 'react';\n\nimport './Board.scss';\n\nimport Panel from '../Panel/Panel';\nimport Task from '../Task/Task';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\ninterface Props {\n    id: number,\n    boardsList: Array<{\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    }>;\n    activeBoardData: {\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    };\n    onSetActiveBoard: typeof actions.onSetActiveBoard;\n}\n\ninterface BoardState {\n    tasks: Array<FormattedTask>,\n    board: {\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    }\n}\n\ninterface BoardGlobalState {\n    activeBoardData: {\n        id: number, \n        img: string, \n        name: string, \n        dueDate: string, \n        tasks: []\n    }\n}\n\ninterface FormattedTask {\n   key: number;\n   panel: string;\n   taskComponent: JSX.Element; \n}\n\nconst actions = {\n    onSetActiveBoard: (val: number) => ({type: 'SET_ACTIVE_BOARD', payload: val})\n}\n\nclass Board extends React.Component<Props, BoardState> {\n\n    initState() {\n\n        let tasksList = this.state.board.tasks;\n\n        let formattedTasks: Array<FormattedTask> = tasksList.map(task => ({\n            key: Math.random(),\n            panel: 'todos',\n            taskComponent: (\n                <Task\n                    taskCategory=\"TD\"\n                    taskName=\"TD 1\"\n                    taskDate=\"1-1-19\"\n                    taskStatus=\"Active\"\n                />\n            )\n        }));\n\n        console.log(formattedTasks);\n\n        this.setState({\n            tasks: formattedTasks,\n            // tasks: [\n            //     {   \n            //         key: Math.random().toString(), \n            //         panel: \"todo\", \n            //         taskComponent: (\n            //             <Task\n            //                 taskCategory=\"TD\"\n            //                 taskName=\"TD 1\"\n            //                 taskDate=\"1-1-19\"\n            //                 taskStatus=\"Active\"\n            //             />\n            //         )\n            //     },\n            //     {   \n            //         key: Math.random().toString(), \n            //         panel: \"inprogress\", \n            //         taskComponent: (\n            //             <Task\n            //                 taskCategory=\"IP\"\n            //                 taskName=\"IP 1\"\n            //                 taskDate=\"1-1-19\"\n            //                 taskStatus=\"Active\"\n            //             />\n            //         )\n            //     }\n            // ],\n            board: {\n                id: this.props.activeBoardData.id, \n                img: this.props.activeBoardData.img, \n                name: this.props.activeBoardData.name, \n                dueDate: this.props.activeBoardData.dueDate, \n                tasks: this.props.activeBoardData.tasks\n            }\n        });\n    }\n\n    UNSAFE_componentWillMount() {\n        this.initState();\n        return this.props.onSetActiveBoard(this.props.id);\n    }\n\n    onDragStart = (e: React.DragEvent, id: string) => {\n        console.log('dragstart:', id);\n        e.dataTransfer.setData(\"id\",id);\n    }\n\n    onDragOver = (e: React.DragEvent) => {\n        e.preventDefault();\n    }\n\n    onDrop = (e: React.DragEvent, cat: string) => {\n        let id = e.dataTransfer.getData(\"id\");\n        let tasks = this.state.tasks.filter((task) => {\n            if (task.key.toString() === id) {\n                task.panel = cat;\n            }\n            return task;\n        });\n\n        this.setState({\n            ...this.state,\n            tasks\n        });\n    }\n\n    render () {\n        console.log('reder');\n        let tasks: {\n            todo: Array<JSX.Element>, \n            inprogress: Array<JSX.Element>, \n            done: Array<JSX.Element>\n        } = {\n            todo: [],\n            inprogress: [],\n            done: []\n        }\n\n        this.state.tasks.forEach((t) => {\n            switch (t.panel) {\n                case 'todo':\n                    tasks.todo.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key.toString())} \n                            draggable> {t.taskComponent} </div>\n                    );\n                break;\n\n                case 'inprogress':\n                    tasks.inprogress.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key.toString())} \n                            draggable> {t.taskComponent} </div>\n                    );\n                break;\n\n                case 'done':\n                    tasks.done.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key.toString())} \n                            draggable> {t.taskComponent} </div>\n                    );\n                break;\n            }\n            \n        });\n\n        return (\n            <div className=\"board\">\n                <div className=\"board__name\">{this.props.activeBoardData.name}</div>\n                <div className=\"board__due-date\">Due date: {this.props.activeBoardData.dueDate}</div>\n                <div \n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"todo\")}}>\n                    <Panel \n                        tasksList={tasks.todo}\n                        panelTitle=\"TODO\"\n                        panelQuantity={this.props.activeBoardData.tasks.length}\n                    />\n                </div>\n                <div \n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"inprogress\")}}>\n                    <Panel \n                        tasksList={tasks.inprogress}\n                        panelTitle=\"IN PROGRESS\"\n                        panelQuantity={this.props.activeBoardData.tasks.length}\n                    />\n                </div>\n                <div \n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"done\")}}>\n                    <Panel \n                        tasksList={tasks.done}\n                        panelTitle=\"DONE\"\n                        panelQuantity={this.props.activeBoardData.tasks.length}\n                    />\n                </div>\n            </div>\n        );\n    }\n    \n}\n\nconst mapStateToProps = (state: BoardGlobalState) => {\n    return ({\n        activeBoardData: state.activeBoardData\n    });\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    ...bindActionCreators({\n        ...actions,\n      }, dispatch)\n    });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);"]},"metadata":{},"sourceType":"module"}