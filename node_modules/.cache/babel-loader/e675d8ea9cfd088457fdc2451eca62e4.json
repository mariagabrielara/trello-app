{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  activeBoard: 0,\n  boardsList: [],\n  activeBoardData: {\n    id: 0,\n    img: '',\n    name: '',\n    dueDate: '',\n    tasks: [{\n      taskId: 0,\n      category: '',\n      taskName: '',\n      taskDueDate: '',\n      taskStatus: ''\n    }]\n  }\n};\n\nconst getActiveBoardData = state => {\n  return state.boardsList.filter(item => item.id === state.activeBoard)[0];\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_ACTIVE_BOARD':\n      let newActiveBoard = getActiveBoardData(state);\n      return _objectSpread({}, state, {\n        activeBoard: action.payload,\n        activeBoardData: {\n          id: newActiveBoard.id,\n          img: newActiveBoard.id,\n          name: newActiveBoard.id,\n          dueDate: newActiveBoard.id,\n          tasks: newActiveBoard.id\n        }\n      });\n\n    case 'CREATE_NEW_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload.id,\n        boardsList: [...state.boardsList, action.payload]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/store/reducer.tsx"],"names":["initialState","activeBoard","boardsList","activeBoardData","id","img","name","dueDate","tasks","taskId","category","taskName","taskDueDate","taskStatus","getActiveBoardData","state","filter","item","reducer","action","type","newActiveBoard","payload"],"mappings":";;;;;;AA2BA,MAAMA,YAAmB,GAAG;AACxBC,EAAAA,WAAW,EAAE,CADW;AAExBC,EAAAA,UAAU,EAAE,EAFY;AAGxBC,EAAAA,eAAe,EAAE;AACbC,IAAAA,EAAE,EAAE,CADS;AAEbC,IAAAA,GAAG,EAAE,EAFQ;AAGbC,IAAAA,IAAI,EAAE,EAHO;AAIbC,IAAAA,OAAO,EAAE,EAJI;AAKbC,IAAAA,KAAK,EAAE,CAAC;AACJC,MAAAA,MAAM,EAAE,CADJ;AAEJC,MAAAA,QAAQ,EAAE,EAFN;AAGJC,MAAAA,QAAQ,EAAE,EAHN;AAIJC,MAAAA,WAAW,EAAE,EAJT;AAKJC,MAAAA,UAAU,EAAE;AALR,KAAD;AALM;AAHO,CAA5B;;AAkBA,MAAMC,kBAAkB,GAAIC,KAAD,IAAkB;AACzC,SAAQA,KAAK,CAACb,UAAN,CAAiBc,MAAjB,CAAyBC,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYW,KAAK,CAACd,WAApD,CAAD,CAAmE,CAAnE,CAAP;AACH,CAFD;;AAIA,MAAMiB,OAAO,GAAG,CAACH,KAAY,GAAGf,YAAhB,EAA8BmB,MAA9B,KAAiD;AAE7D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,kBAAL;AACI,UAAIC,cAAc,GAAGP,kBAAkB,CAACC,KAAD,CAAvC;AACA,+BACOA,KADP;AAEId,QAAAA,WAAW,EAAEkB,MAAM,CAACG,OAFxB;AAGInB,QAAAA,eAAe,EAAE;AACbC,UAAAA,EAAE,EAAEiB,cAAc,CAACjB,EADN;AAEbC,UAAAA,GAAG,EAAEgB,cAAc,CAACjB,EAFP;AAGbE,UAAAA,IAAI,EAAEe,cAAc,CAACjB,EAHR;AAIbG,UAAAA,OAAO,EAAEc,cAAc,CAACjB,EAJX;AAKbI,UAAAA,KAAK,EAAEa,cAAc,CAACjB;AALT;AAHrB;;AAWJ,SAAK,kBAAL;AACI,+BACOW,KADP;AAEId,QAAAA,WAAW,EAAEkB,MAAM,CAACG,OAAP,CAAelB,EAFhC;AAGIF,QAAAA,UAAU,EAAE,CAAC,GAAGa,KAAK,CAACb,UAAV,EAAsBiB,MAAM,CAACG,OAA7B;AAHhB;;AAKJ;AACI,aAAOP,KAAP;AArBR;AAuBH,CAzBD;;AA2BA,eAAeG,OAAf","sourcesContent":["interface Action {\n    type: string;\n    payload: any;\n}\n\ninterface Board {\n    id: number, \n    img: string, \n    name: string, \n    dueDate: string, \n    tasks: Array<Task>\n}\n\ninterface Task {\n    taskId: number,\n    category: string,\n    taskName: string,\n    taskDueDate: string,\n    taskStatus: string\n}\n\ninterface State {\n    activeBoard: number;\n    boardsList: Array<Board>;\n    activeBoardData: Board;\n}\n\nconst initialState: State = {\n    activeBoard: 0,\n    boardsList: [],\n    activeBoardData: {\n        id: 0, \n        img: '', \n        name: '', \n        dueDate: '', \n        tasks: [{\n            taskId: 0,\n            category: '',\n            taskName: '',\n            taskDueDate: '',\n            taskStatus: ''\n        }]\n    }\n};\n\nconst getActiveBoardData = (state: State) => {\n    return (state.boardsList.filter((item) => item.id === state.activeBoard))[0];\n}\n\nconst reducer = (state: State = initialState, action: Action) => {\n\n    switch (action.type) {\n        case 'SET_ACTIVE_BOARD':\n            let newActiveBoard = getActiveBoardData(state);\n            return {\n                ...state,\n                activeBoard: action.payload,\n                activeBoardData: {\n                    id: newActiveBoard.id, \n                    img: newActiveBoard.id, \n                    name: newActiveBoard.id, \n                    dueDate: newActiveBoard.id, \n                    tasks: newActiveBoard.id\n                }\n            }\n        case 'CREATE_NEW_BOARD':\n            return {\n                ...state,\n                activeBoard: action.payload.id,\n                boardsList: [...state.boardsList, action.payload]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}