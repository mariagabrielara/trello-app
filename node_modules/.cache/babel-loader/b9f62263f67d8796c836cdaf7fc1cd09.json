{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  activeBoard: 0,\n  boardsList: [],\n  activeBoardData: {\n    id: 0,\n    img: '',\n    name: '',\n    dueDate: '',\n    tasks: [{\n      taskId: 0,\n      category: '',\n      taskName: '',\n      taskDueDate: '',\n      taskStatus: '',\n      taskPanel: 'todo'\n    }]\n  }\n};\n\nconst getActiveBoardData = state => {\n  return state.boardsList.filter(item => item.id === state.activeBoard)[0];\n};\n\nconst updateBoardsList = (state, action) => {\n  let newTask = {\n    taskId: action.payload.taskId,\n    category: action.payload.category,\n    taskName: action.payload.taskName,\n    taskDueDate: action.payload.taskDueDate,\n    taskStatus: action.payload.taskStatus,\n    taskPanel: action.payload.taskPanel\n  };\n  let currentBoardUpdated = state.activeBoardData;\n  currentBoardUpdated.tasks.push(newTask);\n  let boardsArray = [...state.boardsList];\n  let mapedBoardsArray = boardsArray.map(board => {\n    if (board.id === state.activeBoard) {\n      board = currentBoardUpdated;\n    }\n\n    return board;\n  });\n  return mapedBoardsArray;\n};\n\nconst reducer = (state = initialState, action) => {\n  let newActiveBoard = getActiveBoardData(state);\n\n  switch (action.type) {\n    case 'SET_ACTIVE_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload,\n        activeBoardData: {\n          id: newActiveBoard.id,\n          img: newActiveBoard.img,\n          name: newActiveBoard.name,\n          dueDate: newActiveBoard.dueDate,\n          tasks: newActiveBoard.tasks\n        }\n      });\n\n    case 'CREATE_NEW_BOARD':\n      if (newActiveBoard) {\n        return _objectSpread({}, state, {\n          activeBoard: action.payload.id,\n          boardsList: [...state.boardsList, action.payload],\n          activeBoardData: {\n            id: newActiveBoard.id,\n            img: newActiveBoard.img,\n            name: newActiveBoard.name,\n            dueDate: newActiveBoard.dueDate,\n            tasks: newActiveBoard.tasks\n          }\n        });\n      } else {\n        return _objectSpread({}, state, {\n          activeBoard: action.payload.id,\n          boardsList: [...state.boardsList, action.payload],\n          activeBoardData: {\n            id: action.payload.id,\n            img: action.payload.img,\n            name: action.payload.name,\n            dueDate: action.payload.dueDate,\n            tasks: action.payload.tasks\n          }\n        });\n      }\n\n    case 'CREATE_NEW_TASK':\n      let boardsUpdated = updateBoardsList(state, action);\n      return _objectSpread({}, state, {\n        boardsList: boardsUpdated\n      });\n\n    case 'ON_CHANGE_PANEL':\n      return _objectSpread({}, state, {\n        activeBoardData: _objectSpread({}, state.activeBoardData, {\n          name: action.payload\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/store/reducer.tsx"],"names":["initialState","activeBoard","boardsList","activeBoardData","id","img","name","dueDate","tasks","taskId","category","taskName","taskDueDate","taskStatus","taskPanel","getActiveBoardData","state","filter","item","updateBoardsList","action","newTask","payload","currentBoardUpdated","push","boardsArray","mapedBoardsArray","map","board","reducer","newActiveBoard","type","boardsUpdated"],"mappings":"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","sourcesContent":["interface Action {\n    type: string;\n    payload: any;\n}\n\ninterface Board {\n    id: number, \n    img: string, \n    name: string, \n    dueDate: string, \n    tasks: Array<Task>\n}\n\ninterface Task {\n    taskId: number,\n    category: string,\n    taskName: string,\n    taskDueDate: string,\n    taskStatus: string\n    taskPanel: string;\n}\n\ninterface State {\n    activeBoard: number;\n    boardsList: Array<Board>;\n    activeBoardData: Board;\n}\n\nconst initialState: State = {\n    activeBoard: 0,\n    boardsList: [],\n    activeBoardData: {\n        id: 0, \n        img: '', \n        name: '', \n        dueDate: '', \n        tasks: [{\n            taskId: 0,\n            category: '',\n            taskName: '',\n            taskDueDate: '',\n            taskStatus: '',\n            taskPanel: 'todo'\n        }]\n    }\n};\n\nconst getActiveBoardData = (state: State) => {\n    return (state.boardsList.filter((item) => item.id === state.activeBoard))[0];\n}\n\nconst updateBoardsList = (state: State, action: Action) => {\n    let newTask = {\n        taskId: action.payload.taskId,\n        category: action.payload.category,\n        taskName: action.payload.taskName,\n        taskDueDate: action.payload.taskDueDate,\n        taskStatus: action.payload.taskStatus,\n        taskPanel: action.payload.taskPanel\n    }\n\n    let currentBoardUpdated = state.activeBoardData;\n    currentBoardUpdated.tasks.push(newTask);\n\n    let boardsArray = [...state.boardsList];\n    let mapedBoardsArray = boardsArray.map(board => {\n        if (board.id === state.activeBoard) {\n            board = currentBoardUpdated;\n        } \n        return board;\n    })\n    return mapedBoardsArray;\n}\n\nconst reducer = (state: State = initialState, action: Action) => {\n\n    let newActiveBoard = getActiveBoardData(state);\n    switch (action.type) {\n        case 'SET_ACTIVE_BOARD':\n                return {\n                    ...state,\n                    activeBoard: action.payload,\n                    activeBoardData: {\n                        id: newActiveBoard.id, \n                        img: newActiveBoard.img, \n                        name: newActiveBoard.name, \n                        dueDate: newActiveBoard.dueDate, \n                        tasks: newActiveBoard.tasks\n                    }\n                }\n        case 'CREATE_NEW_BOARD':\n            if (newActiveBoard) {\n                return {\n                    ...state,\n                    activeBoard: action.payload.id,\n                    boardsList: [...state.boardsList, action.payload],\n                    activeBoardData: {\n                        id: newActiveBoard.id, \n                        img: newActiveBoard.img, \n                        name: newActiveBoard.name, \n                        dueDate: newActiveBoard.dueDate, \n                        tasks: newActiveBoard.tasks\n                    }\n                } \n            } else {\n                return {\n                    ...state,\n                    activeBoard: action.payload.id,\n                    boardsList: [...state.boardsList, action.payload],\n                    activeBoardData: {\n                        id: action.payload.id, \n                        img: action.payload.img, \n                        name: action.payload.name, \n                        dueDate: action.payload.dueDate, \n                        tasks: action.payload.tasks\n                    }\n                } \n            } \n        case 'CREATE_NEW_TASK':\n            let boardsUpdated = updateBoardsList(state, action);\n            return {\n                    ...state,\n                    boardsList: boardsUpdated\n                } \n        case 'ON_CHANGE_PANEL':\n            return {\n                    ...state,\n                    activeBoardData: {\n                        ...state.activeBoardData,\n                        name: action.payload\n                    }\n                } \n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}