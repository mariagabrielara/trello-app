{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mariagabriela/Documents/trello-app/src/components/Modals/TaskModal.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Modal from 'react-modal';\nimport './TaskModal.scss';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nconst actions = {\n  onCreateNewTask: val => ({\n    type: 'CREATE_NEW_TASK',\n    payload: val\n  })\n};\n\nclass TaskModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentBoard: this.props.board,\n      newTaskCategory: '',\n      newTaskName: 'Task Name',\n      newTaskDueDate: 'Task Date',\n      newTaskStatus: 'Task Status'\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    this.props.closeModal();\n    return this.props.onCreateNewTask({\n      taskId: Math.random(),\n      category: this.state.newTaskCategory,\n      taskName: this.state.newTaskName,\n      taskDueDate: this.state.newTaskDueDate,\n      taskStatus: this.state.newTaskStatus,\n      taskPanel: this.props.panelType\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"taskmodal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      isOpen: this.props.taskModalIsOpen,\n      onRequestClose: () => this.props.closeModal(),\n      className: \"taskmodal__modal\",\n      ariaHideApp: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"taskmodal__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Create new task\"), React.createElement(\"div\", {\n      className: \"taskmodal__header taskmodal__header--close\",\n      onClick: () => this.props.closeModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"X\"), React.createElement(\"form\", {\n      className: \"taskmodal__form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"taskmodal__text-input\",\n      type: \"text\",\n      name: \"task-category\",\n      placeholder: \"Category\",\n      onChange: e => this.setState({\n        newTaskCategory: e.target.value\n      }),\n      value: this.state.newTaskCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"taskmodal__text-input\",\n      type: \"text\",\n      name: \"task-name\",\n      placeholder: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"taskmodal__date-input\",\n      type: \"date\",\n      name: \"task-due-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"taskmodal__text-input\",\n      type: \"text\",\n      name: \"task-status\",\n      placeholder: \"Status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"taskmodal__button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"+ Add Task\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  activeBoard: state.activeBoard,\n  boardsList: state.boardsList,\n  activeBoardData: state.activeBoardData\n});\n\nconst mapDispatchToProps = dispatch => _objectSpread({}, bindActionCreators(_objectSpread({}, actions), dispatch));\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskModal);","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/Modals/TaskModal.tsx"],"names":["React","Modal","connect","bindActionCreators","actions","onCreateNewTask","val","type","payload","TaskModal","Component","constructor","props","state","currentBoard","board","newTaskCategory","newTaskName","newTaskDueDate","newTaskStatus","handleSubmit","bind","closeModal","taskId","Math","random","category","taskName","taskDueDate","taskStatus","taskPanel","panelType","render","taskModalIsOpen","e","setState","target","value","mapStateToProps","activeBoard","boardsList","activeBoardData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Modal from 'react-modal';\n\nimport './TaskModal.scss';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\ninterface GlobalState {\n  activeBoard: number;\n  boardsList: Array<BoardStructure>;\n  activeBoardData: {\n    id: number, \n    img: string, \n    name: string, \n    dueDate: string, \n    tasks: []\n  };\n}\n\ninterface TaskModalState {\n  currentBoard: BoardStructure;\n  newTaskCategory: string;\n  newTaskName: string;\n  newTaskDueDate: string;\n  newTaskStatus: string;\n}\n\ninterface Props {\n    taskModalIsOpen: boolean;\n    openModal: any;\n    closeModal: any;\n    board: BoardStructure;\n    onCreateNewTask: typeof actions.onCreateNewTask;\n    activeBoardData: {\n      id: number, \n      img: string, \n      name: string, \n      dueDate: string, \n      tasks: []\n    };\n    panelType: string;\n}\n\ninterface Task {\n  taskId: number,\n  category: string,\n  taskName: string,\n  taskDueDate: string,\n  taskStatus: string\n  taskPanel: string;\n}\n\ninterface BoardStructure {\n  id: number, \n  img: string, \n  name: string, \n  dueDate: string, \n  todos: Array<Task>,\n  inprogress: Array<Task>,\n  done: Array<Task>\n}\n\nconst actions = {\n  onCreateNewTask: (val: Task) => ({type: 'CREATE_NEW_TASK', payload: val})\n}\n\nclass TaskModal extends React.Component<Props, TaskModalState> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentBoard: this.props.board,\n      newTaskCategory: '',\n      newTaskName: 'Task Name',\n      newTaskDueDate: 'Task Date',\n      newTaskStatus: 'Task Status'\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    this.props.closeModal();\n    return this.props.onCreateNewTask(\n      {\n        taskId: Math.random(),\n        category: this.state.newTaskCategory,\n        taskName: this.state.newTaskName,\n        taskDueDate: this.state.newTaskDueDate,\n        taskStatus: this.state.newTaskStatus,\n        taskPanel: this.props.panelType\n      }\n    )\n  }\n\n  render () {\n\n    return (\n      <div className=\"taskmodal\">\n        <Modal\n          isOpen={this.props.taskModalIsOpen}\n          onRequestClose={()=>this.props.closeModal()}\n          className=\"taskmodal__modal\"\n          ariaHideApp={false}\n        >\n          <h3 className=\"taskmodal__header\">Create new task</h3>\n          <div className=\"taskmodal__header taskmodal__header--close\" onClick={()=>this.props.closeModal()}>X</div>\n          <form className=\"taskmodal__form\">\n            <input \n              className=\"taskmodal__text-input\" \n              type=\"text\" name=\"task-category\" \n              placeholder=\"Category\" \n              onChange={(e)=>this.setState({newTaskCategory: e.target.value})} \n              value={this.state.newTaskCategory}\n            />\n            <input \n              className=\"taskmodal__text-input\" \n              type=\"text\" name=\"task-name\" \n              placeholder=\"Name\" \n            />\n            <input \n              className=\"taskmodal__date-input\" \n              type=\"date\" \n              name=\"task-due-date\" \n            />\n            <input \n              className=\"taskmodal__text-input\" \n              type=\"text\"\n              name=\"task-status\" \n              placeholder=\"Status\" \n            />\n            <button \n                type=\"button\"\n                className=\"taskmodal__button\" \n                onClick={this.handleSubmit}\n              >\n              + Add Task\n            </button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }     \n}\n\nconst mapStateToProps = (state: GlobalState) => ({\n  activeBoard: state.activeBoard,\n  boardsList: state.boardsList,\n  activeBoardData: state.activeBoardData\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n...bindActionCreators({\n    ...actions,\n  }, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskModal);"]},"metadata":{},"sourceType":"module"}