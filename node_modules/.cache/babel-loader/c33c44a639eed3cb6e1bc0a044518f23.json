{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mariagabriela/Documents/trello-app/src/components/DragDropComponent/DragDropComponent.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './DragDropComponent.scss';\nimport Panel from '../Panel/Panel';\nimport Task from '../Task/Task';\n\nclass DragDropComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDragStart = (e, id) => {\n      console.log('dragstart:', id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDrop = (e, cat) => {\n      let id = e.dataTransfer.getData(\"id\");\n      let tasks = this.state.tasks.filter(task => {\n        if (task.key == id) {\n          task.panel = cat;\n        }\n\n        return task;\n      });\n      this.setState(_objectSpread({}, this.state, {\n        tasks\n      }));\n    };\n  }\n\n  initState() {\n    this.setState({\n      tasks: [{\n        key: Math.random().toString(),\n        panel: \"todo\",\n        taskComponent: React.createElement(Task, {\n          taskCategory: \"TD\",\n          taskName: \"TD 1\",\n          taskDate: \"1-1-19\",\n          taskStatus: \"Active\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        })\n      }]\n    });\n  }\n\n  componentWillMount() {\n    this.initState();\n  }\n\n  render() {\n    let tasks = {\n      todo: [],\n      inprogress: [],\n      done: []\n    };\n    this.state.tasks.forEach(t => {\n      switch (t.panel) {\n        case 'todo':\n          tasks.todo.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, \" \", t.taskComponent, \" \"));\n          break;\n\n        case 'inprogress':\n          tasks.inprogress.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81\n            },\n            __self: this\n          }, \" \", t.key, \" \"));\n          break;\n\n        case 'done':\n          tasks.done.push(React.createElement(\"div\", {\n            key: t.key,\n            onDragStart: e => this.onDragStart(e, t.key),\n            draggable: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, \" \", t.key, \" \"));\n          break;\n      }\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"todo\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, tasks.todo), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => {\n        this.onDrop(e, \"inprogress\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, tasks.inprogress), React.createElement(\"div\", {\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => this.onDrop(e, \"done\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, tasks.done), React.createElement(Panel, {\n      tasksList: tasks.inprogress,\n      panelTitle: \"IN PROGRESS\",\n      panelQuantity: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DragDropComponent;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/DragDropComponent/DragDropComponent.tsx"],"names":["React","Panel","Task","DragDropComponent","Component","onDragStart","e","id","console","log","dataTransfer","setData","onDragOver","preventDefault","onDrop","cat","getData","tasks","state","filter","task","key","panel","setState","initState","Math","random","toString","taskComponent","componentWillMount","render","todo","inprogress","done","forEach","t","push"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport './DragDropComponent.scss';\n\nimport Panel from '../Panel/Panel';\nimport Task from '../Task/Task';\n\ninterface DDState {\n    tasks: { key: string, panel: string, taskComponent: JSX.Element }[]\n}\n\nclass DragDropComponent extends React.Component<{}, DDState> {\n\n    initState() {\n        this.setState({\n            tasks: [\n                {   \n                    key: Math.random().toString(), \n                    panel: \"todo\", \n                    taskComponent: (\n                        <Task\n                            taskCategory=\"TD\"\n                            taskName=\"TD 1\"\n                            taskDate=\"1-1-19\"\n                            taskStatus=\"Active\"\n                        />\n                    )\n                }\n            ]\n        });\n    }\n\n    componentWillMount() {\n        this.initState();\n    }\n\n    onDragStart = (e: React.DragEvent, id: string) => {\n        console.log('dragstart:', id);\n        e.dataTransfer.setData(\"id\",id);\n    }\n\n    onDragOver = (e: React.DragEvent) => {\n        e.preventDefault();\n    }\n\n    onDrop = (e: React.DragEvent, cat: string) => {\n        let id = e.dataTransfer.getData(\"id\");\n        let tasks = this.state.tasks.filter((task) => {\n            if (task.key == id) {\n                task.panel = cat;\n            }\n            return task;\n        });\n\n        this.setState({\n            ...this.state,\n            tasks\n        });\n    }\n\n    render() {\n        let tasks: {todo: Array<JSX.Element>, inprogress: Array<JSX.Element>, done: Array<JSX.Element>} = {\n            todo: [],\n            inprogress: [],\n            done: []\n        }\n\n        this.state.tasks.forEach((t) => {\n            switch (t.panel) {\n                case 'todo':\n                    tasks.todo.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key)} \n                            draggable> {t.taskComponent} </div>\n                    );\n                break;\n\n                case 'inprogress':\n                    tasks.inprogress.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key)} \n                            draggable> {t.key} </div>\n                    );\n                break;\n\n                case 'done':\n                    tasks.done.push( \n                        <div \n                            key={t.key} \n                            onDragStart={(e) => this.onDragStart(e, t.key)} \n                            draggable> {t.key} </div>\n                    );\n                break;\n            }\n            \n        });\n\n        return (\n            <div>\n                <div\n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"todo\")}}>\n                    {tasks.todo}\n                </div>\n                <div\n                    onDragOver={(e)=>this.onDragOver(e)}\n                    onDrop={(e)=>{this.onDrop(e, \"inprogress\")}}>\n                    {tasks.inprogress}\n                </div>\n                <div\n                    onDragOver={(e)=>this.onDragOver(e)} \n                    onDrop={(e)=>this.onDrop(e, \"done\")}>\n                    {tasks.done}\n                </div>\n                <Panel \n                    tasksList={tasks.inprogress}\n                    panelTitle=\"IN PROGRESS\"\n                    panelQuantity={10}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DragDropComponent;"]},"metadata":{},"sourceType":"module"}