{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  activeBoard: 0,\n  boardsList: [],\n  activeBoardData: {\n    id: 0,\n    img: '',\n    name: '',\n    dueDate: '',\n    tasks: []\n  }\n};\n\nconst getActiveBoardData = state => {\n  return state.boardsList.filter(item => item.id === state.activeBoard)[0];\n};\n\nconst updateBoardsList = action => {\n  let newTask = {\n    taskId: action.payload.taskId,\n    category: action.payload.category,\n    taskName: action.payload.taskName,\n    taskDueDate: action.payload.taskDueDate,\n    taskStatus: action.payload.taskStatus,\n    taskPanel: action.payload.taskPanel\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  let newActiveBoard = getActiveBoardData(state);\n\n  switch (action.type) {\n    case 'SET_ACTIVE_BOARD':\n      return _objectSpread({}, state, {\n        activeBoard: action.payload,\n        activeBoardData: {\n          id: newActiveBoard.id,\n          img: newActiveBoard.img,\n          name: newActiveBoard.name,\n          dueDate: newActiveBoard.dueDate,\n          tasks: newActiveBoard.tasks\n        }\n      });\n\n    case 'CREATE_NEW_BOARD':\n      if (newActiveBoard) {\n        return _objectSpread({}, state, {\n          activeBoard: action.payload.id,\n          boardsList: [...state.boardsList, action.payload],\n          activeBoardData: {\n            id: newActiveBoard.id,\n            img: newActiveBoard.img,\n            name: newActiveBoard.name,\n            dueDate: newActiveBoard.dueDate,\n            tasks: newActiveBoard.tasks\n          }\n        });\n      } else {\n        return _objectSpread({}, state, {\n          activeBoard: action.payload.id,\n          boardsList: [...state.boardsList, action.payload],\n          activeBoardData: {\n            id: action.payload.id,\n            img: action.payload.img,\n            name: action.payload.name,\n            dueDate: action.payload.dueDate,\n            tasks: action.payload.tasks\n          }\n        });\n      }\n\n    case 'CREATE_NEW_TASK':\n      updateBoardsList(action);\n      return _objectSpread({}, state, {\n        boardsList: [...state.boardsList, action.payload]\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/store/reducer.tsx"],"names":["initialState","activeBoard","boardsList","activeBoardData","id","img","name","dueDate","tasks","getActiveBoardData","state","filter","item","updateBoardsList","action","newTask","taskId","payload","category","taskName","taskDueDate","taskStatus","taskPanel","reducer","newActiveBoard","type"],"mappings":"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","sourcesContent":["interface Action {\n    type: string;\n    payload: any;\n}\n\ninterface Board {\n    id: number, \n    img: string, \n    name: string, \n    dueDate: string, \n    tasks: Array<Task>\n}\n\ninterface Task {\n    taskId: number,\n    category: string,\n    taskName: string,\n    taskDueDate: string,\n    taskStatus: string\n    taskPanel: string;\n}\n\ninterface State {\n    activeBoard: number;\n    boardsList: Array<Board>;\n    activeBoardData: Board;\n}\n\nconst initialState: State = {\n    activeBoard: 0,\n    boardsList: [],\n    activeBoardData: {\n        id: 0, \n        img: '', \n        name: '', \n        dueDate: '', \n        tasks: []\n    }\n};\n\nconst getActiveBoardData = (state: State) => {\n    return (state.boardsList.filter((item) => item.id === state.activeBoard))[0];\n}\n\nconst updateBoardsList = (action: Action) => {\n    let newTask = {\n        taskId: action.payload.taskId,\n        category: action.payload.category,\n        taskName: action.payload.taskName,\n        taskDueDate: action.payload.taskDueDate,\n        taskStatus: action.payload.taskStatus,\n        taskPanel: action.payload.taskPanel\n    }\n}\n\nconst reducer = (state: State = initialState, action: Action) => {\n\n    let newActiveBoard = getActiveBoardData(state);\n    switch (action.type) {\n        case 'SET_ACTIVE_BOARD':\n                return {\n                    ...state,\n                    activeBoard: action.payload,\n                    activeBoardData: {\n                        id: newActiveBoard.id, \n                        img: newActiveBoard.img, \n                        name: newActiveBoard.name, \n                        dueDate: newActiveBoard.dueDate, \n                        tasks: newActiveBoard.tasks\n                    }\n                }\n        case 'CREATE_NEW_BOARD':\n            if (newActiveBoard) {\n                return {\n                    ...state,\n                    activeBoard: action.payload.id,\n                    boardsList: [...state.boardsList, action.payload],\n                    activeBoardData: {\n                        id: newActiveBoard.id, \n                        img: newActiveBoard.img, \n                        name: newActiveBoard.name, \n                        dueDate: newActiveBoard.dueDate, \n                        tasks: newActiveBoard.tasks\n                    }\n                } \n            } else {\n                return {\n                    ...state,\n                    activeBoard: action.payload.id,\n                    boardsList: [...state.boardsList, action.payload],\n                    activeBoardData: {\n                        id: action.payload.id, \n                        img: action.payload.img, \n                        name: action.payload.name, \n                        dueDate: action.payload.dueDate, \n                        tasks: action.payload.tasks\n                    }\n                } \n            } \n        case 'CREATE_NEW_TASK':\n            updateBoardsList(action);\n            return {\n                    ...state,\n                    boardsList: [...state.boardsList, action.payload]\n                } \n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}