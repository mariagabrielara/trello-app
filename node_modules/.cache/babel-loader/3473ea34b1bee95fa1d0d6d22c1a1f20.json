{"ast":null,"code":"import _defineProperty from \"/Users/mariagabriela/Documents/trello-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/mariagabriela/Documents/trello-app/src/components/DragDropComponent/DragDropComponent.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport './DragDropComponent.scss';\n\nclass DragDropComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDragOver = e => {\n      e.preventDefault();\n    };\n\n    this.onDragStart = (e, id) => {\n      console.log('dragstart:', id);\n      e.dataTransfer.setData(\"id\", id);\n    };\n\n    this.onDrop = (e, category) => {\n      let id = e.dataTransfer.getData(\"id\");\n      let tasks = this.state.tasks.filter(task => {\n        if (task.name == id) {\n          task.category = category;\n        }\n\n        return task;\n      });\n      this.setState(_objectSpread({}, this.state, {\n        tasks\n      }));\n    };\n  }\n\n  componentDidMount() {\n    let newWip = [];\n    let newComplete = [];\n    this.state.tasks.forEach(t => {\n      if (t.category === 'wip') {\n        newWip.push(React.createElement(\"div\", {\n          key: t.name,\n          onDragStart: e => this.onDragStart(e, t.name),\n          draggable: true,\n          className: \"draggable\",\n          style: {\n            backgroundColor: t.bgcolor\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \" \", t.name, \" \"));\n      } else {\n        newComplete.push(React.createElement(\"div\", {\n          key: t.name,\n          onDragStart: e => this.onDragStart(e, t.name),\n          draggable: true,\n          className: \"draggable\",\n          style: {\n            backgroundColor: t.bgcolor\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, \" \", t.name, \" \"));\n      }\n    });\n    this.setState(_objectSpread({}, this.state, {\n      wip: newWip,\n      complete: newComplete\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container-drag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wip\",\n      onDrop: e => {\n        this.onDrop(e, \"wip\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"task-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"WIP\"), React.createElement(\"div\", {\n      key: \"a\",\n      onDragStart: e => this.onDragStart(e, \"a\"),\n      draggable: true,\n      className: \"draggable\",\n      style: {\n        backgroundColor: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \" A \")), React.createElement(\"div\", {\n      className: \"droppable\",\n      onDragOver: e => this.onDragOver(e),\n      onDrop: e => this.onDrop(e, \"complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"task-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"COMPLETED\")));\n  }\n\n}\n\nexport default DragDropComponent;","map":{"version":3,"sources":["/Users/mariagabriela/Documents/trello-app/src/components/DragDropComponent/DragDropComponent.tsx"],"names":["React","DragDropComponent","Component","onDragOver","e","preventDefault","onDragStart","id","console","log","dataTransfer","setData","onDrop","category","getData","tasks","state","filter","task","name","setState","componentDidMount","newWip","newComplete","forEach","t","push","backgroundColor","bgcolor","wip","complete","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport './DragDropComponent.scss';\n\nclass DragDropComponent extends React.Component {\n\n    \n    componentDidMount() {\n        let newWip: Array<JSX.Element> = [];\n        let newComplete: Array<JSX.Element> = [];\n\n        this.state.tasks.forEach((t) => {\n            if (t.category === 'wip') {\n                newWip.push(\n                    <div \n                        key={t.name} \n                        onDragStart={(e) => this.onDragStart(e, t.name)} \n                        draggable \n                        className=\"draggable\" \n                        style={{backgroundColor: t.bgcolor}}> {t.name} </div>\n                );\n            } else {\n                newComplete.push(\n                    <div \n                        key={t.name} \n                        onDragStart={(e) => this.onDragStart(e, t.name)} \n                        draggable \n                        className=\"draggable\" \n                        style={{backgroundColor: t.bgcolor}}> {t.name} </div>\n                );\n            }\n        });\n\n        this.setState({\n            ...this.state,\n            wip: newWip,\n            complete: newComplete\n        })\n    }\n\n    onDragOver = (e: any) => {\n        e.preventDefault();\n    }\n\n    onDragStart = (e: any, id: string) => {\n        console.log('dragstart:', id);\n        e.dataTransfer.setData(\"id\",id);\n    }\n\n    onDrop = (e: any, category: string) => {\n        let id = e.dataTransfer.getData(\"id\");\n        let tasks = this.state.tasks.filter(task => {\n            if (task.name == id) {\n                task.category = category;\n            }\n            return task;\n        });\n\n        this.setState({\n            ...this.state,\n            tasks\n        });\n    }\n\n    render() {\n\n        return (\n            <div className=\"container-drag\">\n                <div className=\"wip\" onDrop={(e)=>{this.onDrop(e, \"wip\")}}>\n                    <span className=\"task-header\">WIP</span>\n                    <div \n                        key=\"a\" \n                        onDragStart={(e) => this.onDragStart(e, \"a\")} \n                        draggable \n                        className=\"draggable\" \n                        style={{backgroundColor: \"red\"}}> A </div>\n                </div>\n                <div className=\"droppable\" onDragOver={(e)=>this.onDragOver(e)} onDrop={(e)=>this.onDrop(e, \"complete\")}>\n                    <span className=\"task-header\">COMPLETED</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DragDropComponent;"]},"metadata":{},"sourceType":"module"}